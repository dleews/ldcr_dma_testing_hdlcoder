// -------------------------------------------------------------
// 
// File Name: /home/draco/git/adi_dma_testing/iq_dma_example/hdl_ip/hdlsrc/rx_dma_test/rx_dma_test_src_subFilter.v
// Created: 2025-08-21 13:52:00
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: rx_dma_test_src_subFilter
// Source Path: rx_dma_test/LDCR_D/Channelizer_CH1/FilterBank/subFilter
// Hierarchy Level: 3
// Model version: 9.535
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module rx_dma_test_src_subFilter
          (clk,
           reset,
           enb,
           dinReg2_0_re,
           coefIn_0,
           coefIn_1,
           coefIn_2,
           coefIn_3,
           coefIn_4,
           coefIn_5,
           coefIn_6,
           coefIn_7,
           coefIn_8,
           coefIn_9,
           coefIn_10,
           coefIn_11,
           dinRegVld,
           syncReset,
           dout_1_re,
           doutVld);


  input   clk;
  input   reset;
  input   enb;
  input   signed [13:0] dinReg2_0_re;  // sfix14
  input   signed [13:0] coefIn_0;  // sfix14_En18
  input   signed [13:0] coefIn_1;  // sfix14_En18
  input   signed [13:0] coefIn_2;  // sfix14_En18
  input   signed [13:0] coefIn_3;  // sfix14_En18
  input   signed [13:0] coefIn_4;  // sfix14_En18
  input   signed [13:0] coefIn_5;  // sfix14_En18
  input   signed [13:0] coefIn_6;  // sfix14_En18
  input   signed [13:0] coefIn_7;  // sfix14_En18
  input   signed [13:0] coefIn_8;  // sfix14_En18
  input   signed [13:0] coefIn_9;  // sfix14_En18
  input   signed [13:0] coefIn_10;  // sfix14_En18
  input   signed [13:0] coefIn_11;  // sfix14_En18
  input   dinRegVld;
  input   syncReset;
  output  signed [13:0] dout_1_re;  // sfix14_En5
  output  doutVld;


  reg  [707:0] intdelay_reg;  // ufix1 [708]
  wire vldShift;
  wire vldOutTmp;
  wire signed [13:0] ZERO_OUT;  // sfix14_En5
  wire signed [47:0] addin;  // sfix48_En18
  wire signed [13:0] dinDly2;  // sfix14
  wire signed [47:0] tapout;  // sfix48_En18
  reg signed [13:0] intdelay_reg_1 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2;  // sfix14
  reg signed [47:0] intdelay_reg_2 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_1 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1;  // sfix48_En18
  wire signed [13:0] dinDly2_1;  // sfix14
  wire signed [47:0] tapout_1;  // sfix48_En18
  reg signed [13:0] intdelay_reg_3 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_2 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_1;  // sfix14
  reg signed [47:0] intdelay_reg_4 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_3 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_1;  // sfix48_En18
  wire signed [13:0] dinDly2_2;  // sfix14
  wire signed [47:0] tapout_2;  // sfix48_En18
  reg signed [13:0] intdelay_reg_5 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_4 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_2;  // sfix14
  reg signed [47:0] intdelay_reg_6 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_5 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_2;  // sfix48_En18
  wire signed [13:0] dinDly2_3;  // sfix14
  wire signed [47:0] tapout_3;  // sfix48_En18
  reg signed [13:0] intdelay_reg_7 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_6 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_3;  // sfix14
  reg signed [47:0] intdelay_reg_8 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_7 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_3;  // sfix48_En18
  wire signed [13:0] dinDly2_4;  // sfix14
  wire signed [47:0] tapout_4;  // sfix48_En18
  reg signed [13:0] intdelay_reg_9 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_8 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_4;  // sfix14
  reg signed [47:0] intdelay_reg_10 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_9 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_4;  // sfix48_En18
  wire signed [13:0] dinDly2_5;  // sfix14
  wire signed [47:0] tapout_5;  // sfix48_En18
  reg signed [13:0] intdelay_reg_11 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_10 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_5;  // sfix14
  reg signed [47:0] intdelay_reg_12 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_11 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_5;  // sfix48_En18
  wire signed [13:0] dinDly2_6;  // sfix14
  wire signed [47:0] tapout_6;  // sfix48_En18
  reg signed [13:0] intdelay_reg_13 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_12 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_6;  // sfix14
  reg signed [47:0] intdelay_reg_14 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_13 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_6;  // sfix48_En18
  wire signed [13:0] dinDly2_7;  // sfix14
  wire signed [47:0] tapout_7;  // sfix48_En18
  reg signed [13:0] intdelay_reg_15 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_14 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_7;  // sfix14
  reg signed [47:0] intdelay_reg_16 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_15 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_7;  // sfix48_En18
  wire signed [13:0] dinDly2_8;  // sfix14
  wire signed [47:0] tapout_8;  // sfix48_En18
  reg signed [13:0] intdelay_reg_17 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_16 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_8;  // sfix14
  reg signed [47:0] intdelay_reg_18 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_17 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_8;  // sfix48_En18
  wire signed [13:0] dinDly2_9;  // sfix14
  wire signed [47:0] tapout_9;  // sfix48_En18
  reg signed [13:0] intdelay_reg_19 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_18 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_9;  // sfix14
  reg signed [47:0] intdelay_reg_20 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_19 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_9;  // sfix48_En18
  wire signed [13:0] dinDly2_10;  // sfix14
  wire signed [47:0] tapout_10;  // sfix48_En18
  reg signed [13:0] intdelay_reg_21 [0:125];  // sfix14 [126]
  reg signed [13:0] intdelay_reg_next_20 [0:125];  // sfix14 [126]
  reg signed [13:0] dlyLineOut2_10;  // sfix14
  reg signed [47:0] intdelay_reg_22 [0:62];  // sfix48 [63]
  reg signed [47:0] intdelay_reg_next_21 [0:62];  // sfix48_En18 [63]
  reg signed [47:0] dlyLineOut1_10;  // sfix48_En18
  wire signed [13:0] dinDly2deadOut;  // sfix14
  wire signed [47:0] tapout_11;  // sfix48_En18
  wire signed [13:0] dout_cast;  // sfix14_En5
  wire signed [13:0] muxOut;  // sfix14_En5
  reg signed [13:0] dout_1_re_1;  // sfix14_En5
  reg  doutVld_1;
  reg signed [31:0] intdelay_t_0_0;  // int32
  reg signed [31:0] intdelay_t_0_1;  // int32
  reg signed [31:0] intdelay_t_1;  // int32
  reg signed [31:0] intdelay_t_0_01;  // int32
  reg signed [31:0] intdelay_t_0_02;  // int32
  reg signed [31:0] intdelay_t_0_1_1;  // int32
  reg signed [31:0] intdelay_t_1_1;  // int32
  reg signed [31:0] intdelay_t_0_03;  // int32
  reg signed [31:0] intdelay_t_0_1_2;  // int32
  reg signed [31:0] intdelay_t_1_2;  // int32
  reg signed [31:0] intdelay_t_0_04;  // int32
  reg signed [31:0] intdelay_t_0_1_3;  // int32
  reg signed [31:0] intdelay_t_1_3;  // int32
  reg signed [31:0] intdelay_t_0_05;  // int32
  reg signed [31:0] intdelay_t_0_1_4;  // int32
  reg signed [31:0] intdelay_t_1_4;  // int32
  reg signed [31:0] intdelay_t_0_06;  // int32
  reg signed [31:0] intdelay_t_0_1_5;  // int32
  reg signed [31:0] intdelay_t_1_5;  // int32
  reg signed [31:0] intdelay_t_0_07;  // int32
  reg signed [31:0] intdelay_t_0_1_6;  // int32
  reg signed [31:0] intdelay_t_1_6;  // int32
  reg signed [31:0] intdelay_t_0_08;  // int32
  reg signed [31:0] intdelay_t_0_1_7;  // int32
  reg signed [31:0] intdelay_t_1_7;  // int32
  reg signed [31:0] intdelay_t_0_09;  // int32
  reg signed [31:0] intdelay_t_0_1_8;  // int32
  reg signed [31:0] intdelay_t_1_8;  // int32
  reg signed [31:0] intdelay_t_0_010;  // int32
  reg signed [31:0] intdelay_t_0_1_9;  // int32
  reg signed [31:0] intdelay_t_1_9;  // int32
  reg signed [31:0] intdelay_t_0_011;  // int32
  reg signed [31:0] intdelay_t_0_1_10;  // int32
  reg signed [31:0] intdelay_t_1_10;  // int32
  reg signed [31:0] intdelay_t_0_012;  // int32
  reg signed [31:0] intdelay_t_0_1_11;  // int32
  reg signed [31:0] intdelay_t_1_11;  // int32
  reg signed [31:0] intdelay_t_0_013;  // int32
  reg signed [31:0] intdelay_t_0_1_12;  // int32
  reg signed [31:0] intdelay_t_1_12;  // int32
  reg signed [31:0] intdelay_t_0_014;  // int32
  reg signed [31:0] intdelay_t_0_1_13;  // int32
  reg signed [31:0] intdelay_t_1_13;  // int32
  reg signed [31:0] intdelay_t_0_015;  // int32
  reg signed [31:0] intdelay_t_0_1_14;  // int32
  reg signed [31:0] intdelay_t_1_14;  // int32
  reg signed [31:0] intdelay_t_0_016;  // int32
  reg signed [31:0] intdelay_t_0_1_15;  // int32
  reg signed [31:0] intdelay_t_1_15;  // int32
  reg signed [31:0] intdelay_t_0_017;  // int32
  reg signed [31:0] intdelay_t_0_1_16;  // int32
  reg signed [31:0] intdelay_t_1_16;  // int32
  reg signed [31:0] intdelay_t_0_018;  // int32
  reg signed [31:0] intdelay_t_0_1_17;  // int32
  reg signed [31:0] intdelay_t_1_17;  // int32
  reg signed [31:0] intdelay_t_0_019;  // int32
  reg signed [31:0] intdelay_t_0_1_18;  // int32
  reg signed [31:0] intdelay_t_1_18;  // int32
  reg signed [31:0] intdelay_t_0_020;  // int32
  reg signed [31:0] intdelay_t_0_1_19;  // int32
  reg signed [31:0] intdelay_t_1_19;  // int32
  reg signed [31:0] intdelay_t_0_021;  // int32
  reg signed [31:0] intdelay_t_0_1_20;  // int32
  reg signed [31:0] intdelay_t_1_20;  // int32


  always @(posedge clk)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg <= {708{1'b0}};
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            intdelay_reg <= {708{1'b0}};
          end
          else begin
            if (dinRegVld) begin
              intdelay_reg[0] <= dinRegVld;
              intdelay_reg[32'sd707:32'sd1] <= intdelay_reg[32'sd706:32'sd0];
            end
          end
        end
      end
    end

  assign vldShift = intdelay_reg[707];



  assign vldOutTmp = dinRegVld & vldShift;



  assign ZERO_OUT = 14'sb00000000000000;



  assign addin = 48'sh000000000000;



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_1 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dinReg2_0_re),  // sfix14
                                                         .coefIn_0(coefIn_0),  // sfix14_En18
                                                         .addin(addin),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2),  // sfix14
                                                         .tapout(tapout)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd125; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
          intdelay_reg_1[intdelay_t_1] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd125; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
              intdelay_reg_1[intdelay_t_1] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1 = 32'sd0; intdelay_t_0_1 <= 32'sd125; intdelay_t_0_1 = intdelay_t_0_1 + 32'sd1) begin
                intdelay_reg_1[intdelay_t_0_1] <= intdelay_reg_next[intdelay_t_0_1];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2 = intdelay_reg_1[125];
    intdelay_reg_next[0] = dinDly2;

    for(intdelay_t_0_0 = 32'sd0; intdelay_t_0_0 <= 32'sd124; intdelay_t_0_0 = intdelay_t_0_0 + 32'sd1) begin
      intdelay_reg_next[intdelay_t_0_0 + 32'sd1] = intdelay_reg_1[intdelay_t_0_0];
    end

  end



  always @(posedge clk)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd62; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
          intdelay_reg_2[intdelay_t_1] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd62; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
              intdelay_reg_2[intdelay_t_1] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1 = 32'sd0; intdelay_t_0_1 <= 32'sd62; intdelay_t_0_1 = intdelay_t_0_1 + 32'sd1) begin
                intdelay_reg_2[intdelay_t_0_1] <= intdelay_reg_next_1[intdelay_t_0_1];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1 = intdelay_reg_2[62];
    intdelay_reg_next_1[0] = tapout;

    for(intdelay_t_0_01 = 32'sd0; intdelay_t_0_01 <= 32'sd61; intdelay_t_0_01 = intdelay_t_0_01 + 32'sd1) begin
      intdelay_reg_next_1[intdelay_t_0_01 + 32'sd1] = intdelay_reg_2[intdelay_t_0_01];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_2 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dlyLineOut2),  // sfix14
                                                         .coefIn_0(coefIn_1),  // sfix14_En18
                                                         .addin(dlyLineOut1),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2_1),  // sfix14
                                                         .tapout(tapout_1)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_1 = 32'sd0; intdelay_t_1_1 <= 32'sd125; intdelay_t_1_1 = intdelay_t_1_1 + 32'sd1) begin
          intdelay_reg_3[intdelay_t_1_1] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_1 = 32'sd0; intdelay_t_1_1 <= 32'sd125; intdelay_t_1_1 = intdelay_t_1_1 + 32'sd1) begin
              intdelay_reg_3[intdelay_t_1_1] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_1 = 32'sd0; intdelay_t_0_1_1 <= 32'sd125; intdelay_t_0_1_1 = intdelay_t_0_1_1 + 32'sd1) begin
                intdelay_reg_3[intdelay_t_0_1_1] <= intdelay_reg_next_2[intdelay_t_0_1_1];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_1 = intdelay_reg_3[125];
    intdelay_reg_next_2[0] = dinDly2_1;

    for(intdelay_t_0_02 = 32'sd0; intdelay_t_0_02 <= 32'sd124; intdelay_t_0_02 = intdelay_t_0_02 + 32'sd1) begin
      intdelay_reg_next_2[intdelay_t_0_02 + 32'sd1] = intdelay_reg_3[intdelay_t_0_02];
    end

  end



  always @(posedge clk)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_2 = 32'sd0; intdelay_t_1_2 <= 32'sd62; intdelay_t_1_2 = intdelay_t_1_2 + 32'sd1) begin
          intdelay_reg_4[intdelay_t_1_2] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_2 = 32'sd0; intdelay_t_1_2 <= 32'sd62; intdelay_t_1_2 = intdelay_t_1_2 + 32'sd1) begin
              intdelay_reg_4[intdelay_t_1_2] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_2 = 32'sd0; intdelay_t_0_1_2 <= 32'sd62; intdelay_t_0_1_2 = intdelay_t_0_1_2 + 32'sd1) begin
                intdelay_reg_4[intdelay_t_0_1_2] <= intdelay_reg_next_3[intdelay_t_0_1_2];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_1 = intdelay_reg_4[62];
    intdelay_reg_next_3[0] = tapout_1;

    for(intdelay_t_0_03 = 32'sd0; intdelay_t_0_03 <= 32'sd61; intdelay_t_0_03 = intdelay_t_0_03 + 32'sd1) begin
      intdelay_reg_next_3[intdelay_t_0_03 + 32'sd1] = intdelay_reg_4[intdelay_t_0_03];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_3 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dlyLineOut2_1),  // sfix14
                                                         .coefIn_0(coefIn_2),  // sfix14_En18
                                                         .addin(dlyLineOut1_1),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2_2),  // sfix14
                                                         .tapout(tapout_2)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_3 = 32'sd0; intdelay_t_1_3 <= 32'sd125; intdelay_t_1_3 = intdelay_t_1_3 + 32'sd1) begin
          intdelay_reg_5[intdelay_t_1_3] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_3 = 32'sd0; intdelay_t_1_3 <= 32'sd125; intdelay_t_1_3 = intdelay_t_1_3 + 32'sd1) begin
              intdelay_reg_5[intdelay_t_1_3] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_3 = 32'sd0; intdelay_t_0_1_3 <= 32'sd125; intdelay_t_0_1_3 = intdelay_t_0_1_3 + 32'sd1) begin
                intdelay_reg_5[intdelay_t_0_1_3] <= intdelay_reg_next_4[intdelay_t_0_1_3];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_2 = intdelay_reg_5[125];
    intdelay_reg_next_4[0] = dinDly2_2;

    for(intdelay_t_0_04 = 32'sd0; intdelay_t_0_04 <= 32'sd124; intdelay_t_0_04 = intdelay_t_0_04 + 32'sd1) begin
      intdelay_reg_next_4[intdelay_t_0_04 + 32'sd1] = intdelay_reg_5[intdelay_t_0_04];
    end

  end



  always @(posedge clk)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_4 = 32'sd0; intdelay_t_1_4 <= 32'sd62; intdelay_t_1_4 = intdelay_t_1_4 + 32'sd1) begin
          intdelay_reg_6[intdelay_t_1_4] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_4 = 32'sd0; intdelay_t_1_4 <= 32'sd62; intdelay_t_1_4 = intdelay_t_1_4 + 32'sd1) begin
              intdelay_reg_6[intdelay_t_1_4] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_4 = 32'sd0; intdelay_t_0_1_4 <= 32'sd62; intdelay_t_0_1_4 = intdelay_t_0_1_4 + 32'sd1) begin
                intdelay_reg_6[intdelay_t_0_1_4] <= intdelay_reg_next_5[intdelay_t_0_1_4];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_2 = intdelay_reg_6[62];
    intdelay_reg_next_5[0] = tapout_2;

    for(intdelay_t_0_05 = 32'sd0; intdelay_t_0_05 <= 32'sd61; intdelay_t_0_05 = intdelay_t_0_05 + 32'sd1) begin
      intdelay_reg_next_5[intdelay_t_0_05 + 32'sd1] = intdelay_reg_6[intdelay_t_0_05];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_4 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dlyLineOut2_2),  // sfix14
                                                         .coefIn_0(coefIn_3),  // sfix14_En18
                                                         .addin(dlyLineOut1_2),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2_3),  // sfix14
                                                         .tapout(tapout_3)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_5 = 32'sd0; intdelay_t_1_5 <= 32'sd125; intdelay_t_1_5 = intdelay_t_1_5 + 32'sd1) begin
          intdelay_reg_7[intdelay_t_1_5] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_5 = 32'sd0; intdelay_t_1_5 <= 32'sd125; intdelay_t_1_5 = intdelay_t_1_5 + 32'sd1) begin
              intdelay_reg_7[intdelay_t_1_5] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_5 = 32'sd0; intdelay_t_0_1_5 <= 32'sd125; intdelay_t_0_1_5 = intdelay_t_0_1_5 + 32'sd1) begin
                intdelay_reg_7[intdelay_t_0_1_5] <= intdelay_reg_next_6[intdelay_t_0_1_5];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_3 = intdelay_reg_7[125];
    intdelay_reg_next_6[0] = dinDly2_3;

    for(intdelay_t_0_06 = 32'sd0; intdelay_t_0_06 <= 32'sd124; intdelay_t_0_06 = intdelay_t_0_06 + 32'sd1) begin
      intdelay_reg_next_6[intdelay_t_0_06 + 32'sd1] = intdelay_reg_7[intdelay_t_0_06];
    end

  end



  always @(posedge clk)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_6 = 32'sd0; intdelay_t_1_6 <= 32'sd62; intdelay_t_1_6 = intdelay_t_1_6 + 32'sd1) begin
          intdelay_reg_8[intdelay_t_1_6] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_6 = 32'sd0; intdelay_t_1_6 <= 32'sd62; intdelay_t_1_6 = intdelay_t_1_6 + 32'sd1) begin
              intdelay_reg_8[intdelay_t_1_6] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_6 = 32'sd0; intdelay_t_0_1_6 <= 32'sd62; intdelay_t_0_1_6 = intdelay_t_0_1_6 + 32'sd1) begin
                intdelay_reg_8[intdelay_t_0_1_6] <= intdelay_reg_next_7[intdelay_t_0_1_6];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_3 = intdelay_reg_8[62];
    intdelay_reg_next_7[0] = tapout_3;

    for(intdelay_t_0_07 = 32'sd0; intdelay_t_0_07 <= 32'sd61; intdelay_t_0_07 = intdelay_t_0_07 + 32'sd1) begin
      intdelay_reg_next_7[intdelay_t_0_07 + 32'sd1] = intdelay_reg_8[intdelay_t_0_07];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_5 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dlyLineOut2_3),  // sfix14
                                                         .coefIn_0(coefIn_4),  // sfix14_En18
                                                         .addin(dlyLineOut1_3),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2_4),  // sfix14
                                                         .tapout(tapout_4)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_7 = 32'sd0; intdelay_t_1_7 <= 32'sd125; intdelay_t_1_7 = intdelay_t_1_7 + 32'sd1) begin
          intdelay_reg_9[intdelay_t_1_7] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_7 = 32'sd0; intdelay_t_1_7 <= 32'sd125; intdelay_t_1_7 = intdelay_t_1_7 + 32'sd1) begin
              intdelay_reg_9[intdelay_t_1_7] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_7 = 32'sd0; intdelay_t_0_1_7 <= 32'sd125; intdelay_t_0_1_7 = intdelay_t_0_1_7 + 32'sd1) begin
                intdelay_reg_9[intdelay_t_0_1_7] <= intdelay_reg_next_8[intdelay_t_0_1_7];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_4 = intdelay_reg_9[125];
    intdelay_reg_next_8[0] = dinDly2_4;

    for(intdelay_t_0_08 = 32'sd0; intdelay_t_0_08 <= 32'sd124; intdelay_t_0_08 = intdelay_t_0_08 + 32'sd1) begin
      intdelay_reg_next_8[intdelay_t_0_08 + 32'sd1] = intdelay_reg_9[intdelay_t_0_08];
    end

  end



  always @(posedge clk)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_8 = 32'sd0; intdelay_t_1_8 <= 32'sd62; intdelay_t_1_8 = intdelay_t_1_8 + 32'sd1) begin
          intdelay_reg_10[intdelay_t_1_8] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_8 = 32'sd0; intdelay_t_1_8 <= 32'sd62; intdelay_t_1_8 = intdelay_t_1_8 + 32'sd1) begin
              intdelay_reg_10[intdelay_t_1_8] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_8 = 32'sd0; intdelay_t_0_1_8 <= 32'sd62; intdelay_t_0_1_8 = intdelay_t_0_1_8 + 32'sd1) begin
                intdelay_reg_10[intdelay_t_0_1_8] <= intdelay_reg_next_9[intdelay_t_0_1_8];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_4 = intdelay_reg_10[62];
    intdelay_reg_next_9[0] = tapout_4;

    for(intdelay_t_0_09 = 32'sd0; intdelay_t_0_09 <= 32'sd61; intdelay_t_0_09 = intdelay_t_0_09 + 32'sd1) begin
      intdelay_reg_next_9[intdelay_t_0_09 + 32'sd1] = intdelay_reg_10[intdelay_t_0_09];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_6 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dlyLineOut2_4),  // sfix14
                                                         .coefIn_0(coefIn_5),  // sfix14_En18
                                                         .addin(dlyLineOut1_4),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2_5),  // sfix14
                                                         .tapout(tapout_5)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_9 = 32'sd0; intdelay_t_1_9 <= 32'sd125; intdelay_t_1_9 = intdelay_t_1_9 + 32'sd1) begin
          intdelay_reg_11[intdelay_t_1_9] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_9 = 32'sd0; intdelay_t_1_9 <= 32'sd125; intdelay_t_1_9 = intdelay_t_1_9 + 32'sd1) begin
              intdelay_reg_11[intdelay_t_1_9] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_9 = 32'sd0; intdelay_t_0_1_9 <= 32'sd125; intdelay_t_0_1_9 = intdelay_t_0_1_9 + 32'sd1) begin
                intdelay_reg_11[intdelay_t_0_1_9] <= intdelay_reg_next_10[intdelay_t_0_1_9];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_5 = intdelay_reg_11[125];
    intdelay_reg_next_10[0] = dinDly2_5;

    for(intdelay_t_0_010 = 32'sd0; intdelay_t_0_010 <= 32'sd124; intdelay_t_0_010 = intdelay_t_0_010 + 32'sd1) begin
      intdelay_reg_next_10[intdelay_t_0_010 + 32'sd1] = intdelay_reg_11[intdelay_t_0_010];
    end

  end



  always @(posedge clk)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_10 = 32'sd0; intdelay_t_1_10 <= 32'sd62; intdelay_t_1_10 = intdelay_t_1_10 + 32'sd1) begin
          intdelay_reg_12[intdelay_t_1_10] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_10 = 32'sd0; intdelay_t_1_10 <= 32'sd62; intdelay_t_1_10 = intdelay_t_1_10 + 32'sd1) begin
              intdelay_reg_12[intdelay_t_1_10] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_10 = 32'sd0; intdelay_t_0_1_10 <= 32'sd62; intdelay_t_0_1_10 = intdelay_t_0_1_10 + 32'sd1) begin
                intdelay_reg_12[intdelay_t_0_1_10] <= intdelay_reg_next_11[intdelay_t_0_1_10];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_5 = intdelay_reg_12[62];
    intdelay_reg_next_11[0] = tapout_5;

    for(intdelay_t_0_011 = 32'sd0; intdelay_t_0_011 <= 32'sd61; intdelay_t_0_011 = intdelay_t_0_011 + 32'sd1) begin
      intdelay_reg_next_11[intdelay_t_0_011 + 32'sd1] = intdelay_reg_12[intdelay_t_0_011];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_7 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dlyLineOut2_5),  // sfix14
                                                         .coefIn_0(coefIn_6),  // sfix14_En18
                                                         .addin(dlyLineOut1_5),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2_6),  // sfix14
                                                         .tapout(tapout_6)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_11 = 32'sd0; intdelay_t_1_11 <= 32'sd125; intdelay_t_1_11 = intdelay_t_1_11 + 32'sd1) begin
          intdelay_reg_13[intdelay_t_1_11] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_11 = 32'sd0; intdelay_t_1_11 <= 32'sd125; intdelay_t_1_11 = intdelay_t_1_11 + 32'sd1) begin
              intdelay_reg_13[intdelay_t_1_11] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_11 = 32'sd0; intdelay_t_0_1_11 <= 32'sd125; intdelay_t_0_1_11 = intdelay_t_0_1_11 + 32'sd1) begin
                intdelay_reg_13[intdelay_t_0_1_11] <= intdelay_reg_next_12[intdelay_t_0_1_11];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_6 = intdelay_reg_13[125];
    intdelay_reg_next_12[0] = dinDly2_6;

    for(intdelay_t_0_012 = 32'sd0; intdelay_t_0_012 <= 32'sd124; intdelay_t_0_012 = intdelay_t_0_012 + 32'sd1) begin
      intdelay_reg_next_12[intdelay_t_0_012 + 32'sd1] = intdelay_reg_13[intdelay_t_0_012];
    end

  end



  always @(posedge clk)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_12 = 32'sd0; intdelay_t_1_12 <= 32'sd62; intdelay_t_1_12 = intdelay_t_1_12 + 32'sd1) begin
          intdelay_reg_14[intdelay_t_1_12] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_12 = 32'sd0; intdelay_t_1_12 <= 32'sd62; intdelay_t_1_12 = intdelay_t_1_12 + 32'sd1) begin
              intdelay_reg_14[intdelay_t_1_12] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_12 = 32'sd0; intdelay_t_0_1_12 <= 32'sd62; intdelay_t_0_1_12 = intdelay_t_0_1_12 + 32'sd1) begin
                intdelay_reg_14[intdelay_t_0_1_12] <= intdelay_reg_next_13[intdelay_t_0_1_12];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_6 = intdelay_reg_14[62];
    intdelay_reg_next_13[0] = tapout_6;

    for(intdelay_t_0_013 = 32'sd0; intdelay_t_0_013 <= 32'sd61; intdelay_t_0_013 = intdelay_t_0_013 + 32'sd1) begin
      intdelay_reg_next_13[intdelay_t_0_013 + 32'sd1] = intdelay_reg_14[intdelay_t_0_013];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_8 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dlyLineOut2_6),  // sfix14
                                                         .coefIn_0(coefIn_7),  // sfix14_En18
                                                         .addin(dlyLineOut1_6),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2_7),  // sfix14
                                                         .tapout(tapout_7)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_13 = 32'sd0; intdelay_t_1_13 <= 32'sd125; intdelay_t_1_13 = intdelay_t_1_13 + 32'sd1) begin
          intdelay_reg_15[intdelay_t_1_13] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_13 = 32'sd0; intdelay_t_1_13 <= 32'sd125; intdelay_t_1_13 = intdelay_t_1_13 + 32'sd1) begin
              intdelay_reg_15[intdelay_t_1_13] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_13 = 32'sd0; intdelay_t_0_1_13 <= 32'sd125; intdelay_t_0_1_13 = intdelay_t_0_1_13 + 32'sd1) begin
                intdelay_reg_15[intdelay_t_0_1_13] <= intdelay_reg_next_14[intdelay_t_0_1_13];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_7 = intdelay_reg_15[125];
    intdelay_reg_next_14[0] = dinDly2_7;

    for(intdelay_t_0_014 = 32'sd0; intdelay_t_0_014 <= 32'sd124; intdelay_t_0_014 = intdelay_t_0_014 + 32'sd1) begin
      intdelay_reg_next_14[intdelay_t_0_014 + 32'sd1] = intdelay_reg_15[intdelay_t_0_014];
    end

  end



  always @(posedge clk)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_14 = 32'sd0; intdelay_t_1_14 <= 32'sd62; intdelay_t_1_14 = intdelay_t_1_14 + 32'sd1) begin
          intdelay_reg_16[intdelay_t_1_14] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_14 = 32'sd0; intdelay_t_1_14 <= 32'sd62; intdelay_t_1_14 = intdelay_t_1_14 + 32'sd1) begin
              intdelay_reg_16[intdelay_t_1_14] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_14 = 32'sd0; intdelay_t_0_1_14 <= 32'sd62; intdelay_t_0_1_14 = intdelay_t_0_1_14 + 32'sd1) begin
                intdelay_reg_16[intdelay_t_0_1_14] <= intdelay_reg_next_15[intdelay_t_0_1_14];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_7 = intdelay_reg_16[62];
    intdelay_reg_next_15[0] = tapout_7;

    for(intdelay_t_0_015 = 32'sd0; intdelay_t_0_015 <= 32'sd61; intdelay_t_0_015 = intdelay_t_0_015 + 32'sd1) begin
      intdelay_reg_next_15[intdelay_t_0_015 + 32'sd1] = intdelay_reg_16[intdelay_t_0_015];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_9 (.clk(clk),
                                                         .enb(enb),
                                                         .dinReg2_0_re(dlyLineOut2_7),  // sfix14
                                                         .coefIn_0(coefIn_8),  // sfix14_En18
                                                         .addin(dlyLineOut1_7),  // sfix48_En18
                                                         .dinRegVld(dinRegVld),
                                                         .dinDly2(dinDly2_8),  // sfix14
                                                         .tapout(tapout_8)  // sfix48_En18
                                                         );

  always @(posedge clk)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_15 = 32'sd0; intdelay_t_1_15 <= 32'sd125; intdelay_t_1_15 = intdelay_t_1_15 + 32'sd1) begin
          intdelay_reg_17[intdelay_t_1_15] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_15 = 32'sd0; intdelay_t_1_15 <= 32'sd125; intdelay_t_1_15 = intdelay_t_1_15 + 32'sd1) begin
              intdelay_reg_17[intdelay_t_1_15] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_15 = 32'sd0; intdelay_t_0_1_15 <= 32'sd125; intdelay_t_0_1_15 = intdelay_t_0_1_15 + 32'sd1) begin
                intdelay_reg_17[intdelay_t_0_1_15] <= intdelay_reg_next_16[intdelay_t_0_1_15];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_8 = intdelay_reg_17[125];
    intdelay_reg_next_16[0] = dinDly2_8;

    for(intdelay_t_0_016 = 32'sd0; intdelay_t_0_016 <= 32'sd124; intdelay_t_0_016 = intdelay_t_0_016 + 32'sd1) begin
      intdelay_reg_next_16[intdelay_t_0_016 + 32'sd1] = intdelay_reg_17[intdelay_t_0_016];
    end

  end



  always @(posedge clk)
    begin : intdelay_18_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_16 = 32'sd0; intdelay_t_1_16 <= 32'sd62; intdelay_t_1_16 = intdelay_t_1_16 + 32'sd1) begin
          intdelay_reg_18[intdelay_t_1_16] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_16 = 32'sd0; intdelay_t_1_16 <= 32'sd62; intdelay_t_1_16 = intdelay_t_1_16 + 32'sd1) begin
              intdelay_reg_18[intdelay_t_1_16] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_16 = 32'sd0; intdelay_t_0_1_16 <= 32'sd62; intdelay_t_0_1_16 = intdelay_t_0_1_16 + 32'sd1) begin
                intdelay_reg_18[intdelay_t_0_1_16] <= intdelay_reg_next_17[intdelay_t_0_1_16];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_8 = intdelay_reg_18[62];
    intdelay_reg_next_17[0] = tapout_8;

    for(intdelay_t_0_017 = 32'sd0; intdelay_t_0_017 <= 32'sd61; intdelay_t_0_017 = intdelay_t_0_017 + 32'sd1) begin
      intdelay_reg_next_17[intdelay_t_0_017 + 32'sd1] = intdelay_reg_18[intdelay_t_0_017];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_10 (.clk(clk),
                                                          .enb(enb),
                                                          .dinReg2_0_re(dlyLineOut2_8),  // sfix14
                                                          .coefIn_0(coefIn_9),  // sfix14_En18
                                                          .addin(dlyLineOut1_8),  // sfix48_En18
                                                          .dinRegVld(dinRegVld),
                                                          .dinDly2(dinDly2_9),  // sfix14
                                                          .tapout(tapout_9)  // sfix48_En18
                                                          );

  always @(posedge clk)
    begin : intdelay_19_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_17 = 32'sd0; intdelay_t_1_17 <= 32'sd125; intdelay_t_1_17 = intdelay_t_1_17 + 32'sd1) begin
          intdelay_reg_19[intdelay_t_1_17] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_17 = 32'sd0; intdelay_t_1_17 <= 32'sd125; intdelay_t_1_17 = intdelay_t_1_17 + 32'sd1) begin
              intdelay_reg_19[intdelay_t_1_17] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_17 = 32'sd0; intdelay_t_0_1_17 <= 32'sd125; intdelay_t_0_1_17 = intdelay_t_0_1_17 + 32'sd1) begin
                intdelay_reg_19[intdelay_t_0_1_17] <= intdelay_reg_next_18[intdelay_t_0_1_17];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_9 = intdelay_reg_19[125];
    intdelay_reg_next_18[0] = dinDly2_9;

    for(intdelay_t_0_018 = 32'sd0; intdelay_t_0_018 <= 32'sd124; intdelay_t_0_018 = intdelay_t_0_018 + 32'sd1) begin
      intdelay_reg_next_18[intdelay_t_0_018 + 32'sd1] = intdelay_reg_19[intdelay_t_0_018];
    end

  end



  always @(posedge clk)
    begin : intdelay_20_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_18 = 32'sd0; intdelay_t_1_18 <= 32'sd62; intdelay_t_1_18 = intdelay_t_1_18 + 32'sd1) begin
          intdelay_reg_20[intdelay_t_1_18] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_18 = 32'sd0; intdelay_t_1_18 <= 32'sd62; intdelay_t_1_18 = intdelay_t_1_18 + 32'sd1) begin
              intdelay_reg_20[intdelay_t_1_18] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_18 = 32'sd0; intdelay_t_0_1_18 <= 32'sd62; intdelay_t_0_1_18 = intdelay_t_0_1_18 + 32'sd1) begin
                intdelay_reg_20[intdelay_t_0_1_18] <= intdelay_reg_next_19[intdelay_t_0_1_18];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_9 = intdelay_reg_20[62];
    intdelay_reg_next_19[0] = tapout_9;

    for(intdelay_t_0_019 = 32'sd0; intdelay_t_0_019 <= 32'sd61; intdelay_t_0_019 = intdelay_t_0_019 + 32'sd1) begin
      intdelay_reg_next_19[intdelay_t_0_019 + 32'sd1] = intdelay_reg_20[intdelay_t_0_019];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_11 (.clk(clk),
                                                          .enb(enb),
                                                          .dinReg2_0_re(dlyLineOut2_9),  // sfix14
                                                          .coefIn_0(coefIn_10),  // sfix14_En18
                                                          .addin(dlyLineOut1_9),  // sfix48_En18
                                                          .dinRegVld(dinRegVld),
                                                          .dinDly2(dinDly2_10),  // sfix14
                                                          .tapout(tapout_10)  // sfix48_En18
                                                          );

  always @(posedge clk)
    begin : intdelay_21_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_19 = 32'sd0; intdelay_t_1_19 <= 32'sd125; intdelay_t_1_19 = intdelay_t_1_19 + 32'sd1) begin
          intdelay_reg_21[intdelay_t_1_19] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_19 = 32'sd0; intdelay_t_1_19 <= 32'sd125; intdelay_t_1_19 = intdelay_t_1_19 + 32'sd1) begin
              intdelay_reg_21[intdelay_t_1_19] <= 14'sb00000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_19 = 32'sd0; intdelay_t_0_1_19 <= 32'sd125; intdelay_t_0_1_19 = intdelay_t_0_1_19 + 32'sd1) begin
                intdelay_reg_21[intdelay_t_0_1_19] <= intdelay_reg_next_20[intdelay_t_0_1_19];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut2_10 = intdelay_reg_21[125];
    intdelay_reg_next_20[0] = dinDly2_10;

    for(intdelay_t_0_020 = 32'sd0; intdelay_t_0_020 <= 32'sd124; intdelay_t_0_020 = intdelay_t_0_020 + 32'sd1) begin
      intdelay_reg_next_20[intdelay_t_0_020 + 32'sd1] = intdelay_reg_21[intdelay_t_0_020];
    end

  end



  always @(posedge clk)
    begin : intdelay_22_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_20 = 32'sd0; intdelay_t_1_20 <= 32'sd62; intdelay_t_1_20 = intdelay_t_1_20 + 32'sd1) begin
          intdelay_reg_22[intdelay_t_1_20] <= 48'sh000000000000;
        end
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            for(intdelay_t_1_20 = 32'sd0; intdelay_t_1_20 <= 32'sd62; intdelay_t_1_20 = intdelay_t_1_20 + 32'sd1) begin
              intdelay_reg_22[intdelay_t_1_20] <= 48'sh000000000000;
            end
          end
          else begin
            if (dinRegVld) begin
              for(intdelay_t_0_1_20 = 32'sd0; intdelay_t_0_1_20 <= 32'sd62; intdelay_t_0_1_20 = intdelay_t_0_1_20 + 32'sd1) begin
                intdelay_reg_22[intdelay_t_0_1_20] <= intdelay_reg_next_21[intdelay_t_0_1_20];
              end
            end
          end
        end
      end
    end

  always @* begin
    dlyLineOut1_10 = intdelay_reg_22[62];
    intdelay_reg_next_21[0] = tapout_10;

    for(intdelay_t_0_021 = 32'sd0; intdelay_t_0_021 <= 32'sd61; intdelay_t_0_021 = intdelay_t_0_021 + 32'sd1) begin
      intdelay_reg_next_21[intdelay_t_0_021 + 32'sd1] = intdelay_reg_22[intdelay_t_0_021];
    end

  end



  rx_dma_test_src_FilterTapSystolicWvldin u_FilterTap_12 (.clk(clk),
                                                          .enb(enb),
                                                          .dinReg2_0_re(dlyLineOut2_10),  // sfix14
                                                          .coefIn_0(coefIn_11),  // sfix14_En18
                                                          .addin(dlyLineOut1_10),  // sfix48_En18
                                                          .dinRegVld(dinRegVld),
                                                          .dinDly2(dinDly2deadOut),  // sfix14
                                                          .tapout(tapout_11)  // sfix48_En18
                                                          );

  assign dout_cast = tapout_11[26:13];



  assign muxOut = (vldOutTmp == 1'b0 ? ZERO_OUT :
              dout_cast);



  always @(posedge clk)
    begin : intdelay_23_process
      if (reset == 1'b1) begin
        dout_1_re_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            dout_1_re_1 <= 14'sb00000000000000;
          end
          else begin
            dout_1_re_1 <= muxOut;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_24_process
      if (reset == 1'b1) begin
        doutVld_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            doutVld_1 <= 1'b0;
          end
          else begin
            doutVld_1 <= vldOutTmp;
          end
        end
      end
    end



  assign dout_1_re = dout_1_re_1;

  assign doutVld = doutVld_1;

endmodule  // rx_dma_test_src_subFilter

