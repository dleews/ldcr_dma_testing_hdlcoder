// -------------------------------------------------------------
// 
// File Name: /home/draco/git/adi_dma_testing/iq_dma_example/hdl_ip/hdlsrc/rx_dma_test/rx_dma_test_src_counter_subsystem.v
// Created: 2025-08-21 13:52:00
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: rx_dma_test_src_counter_subsystem
// Source Path: rx_dma_test/LDCR_D/counter_subsystem
// Hierarchy Level: 1
// Model version: 9.535
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module rx_dma_test_src_counter_subsystem
          (clk,
           reset,
           enb,
           enb_1,
           ch1_re,
           ch1_im,
           ch2_re,
           ch2_im);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1;
  output  [15:0] ch1_re;  // uint16
  output  [15:0] ch1_im;  // uint16
  output  [15:0] ch2_re;  // uint16
  output  [15:0] ch2_im;  // uint16


  wire [11:0] count_step;  // ufix12
  reg [11:0] HDL_Counter_out1;  // ufix12
  wire [11:0] count;  // ufix12
  wire [11:0] count_1;  // ufix12
  wire [15:0] Data_Type_Conversion_out1;  // uint16
  wire [15:0] Constant_out1;  // uint16
  wire [16:0] Add_1;  // ufix17
  wire [16:0] Add_2;  // ufix17
  wire [16:0] Add_out1;  // ufix17
  wire [15:0] Data_Type_Conversion1_out1;  // uint16
  wire [15:0] Constant1_out1;  // uint16
  wire [17:0] Add1_1;  // ufix18
  wire [17:0] Add1_2;  // ufix18
  wire [17:0] Add1_out1;  // ufix18
  wire [15:0] Data_Type_Conversion2_out1;  // uint16
  wire [15:0] Constant2_out1;  // uint16
  wire [18:0] Add2_1;  // ufix19
  wire [18:0] Add2_2;  // ufix19
  wire [18:0] Add2_out1;  // ufix19
  wire [15:0] Data_Type_Conversion3_out1;  // uint16


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 4
  assign count_step = 12'b000000000100;


  assign count = HDL_Counter_out1 + count_step;


  assign count_1 = (enb_1 == 1'b0 ? HDL_Counter_out1 :
              count);


  always @(posedge clk)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out1 <= count_1;
        end
      end
    end


  assign Data_Type_Conversion_out1 = {4'b0, HDL_Counter_out1};


  assign ch1_re = Data_Type_Conversion_out1;

  assign Constant_out1 = 16'b0000000000000001;


  assign Add_1 = {5'b0, HDL_Counter_out1};
  assign Add_2 = {1'b0, Constant_out1};
  assign Add_out1 = Add_1 + Add_2;


  assign Data_Type_Conversion1_out1 = Add_out1[15:0];


  assign ch1_im = Data_Type_Conversion1_out1;

  assign Constant1_out1 = 16'b0000000000000001;


  assign Add1_1 = {1'b0, Add_out1};
  assign Add1_2 = {2'b0, Constant1_out1};
  assign Add1_out1 = Add1_1 + Add1_2;


  assign Data_Type_Conversion2_out1 = Add1_out1[15:0];


  assign ch2_re = Data_Type_Conversion2_out1;

  assign Constant2_out1 = 16'b0000000000000001;


  assign Add2_1 = {1'b0, Add1_out1};
  assign Add2_2 = {3'b0, Constant2_out1};
  assign Add2_out1 = Add2_1 + Add2_2;


  assign Data_Type_Conversion3_out1 = Add2_out1[15:0];


  assign ch2_im = Data_Type_Conversion3_out1;

endmodule  // rx_dma_test_src_counter_subsystem

