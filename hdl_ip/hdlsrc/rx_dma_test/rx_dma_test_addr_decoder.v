// -------------------------------------------------------------
// 
// File Name: /home/draco/git/adi_dma_testing/iq_dma_example/hdl_ip/hdlsrc/rx_dma_test/rx_dma_test_addr_decoder.v
// Created: 2025-08-22 09:27:26
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: rx_dma_test_addr_decoder
// Source Path: rx_dma_test/rx_dma_test_axi4/rx_dma_test_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module rx_dma_test_addr_decoder
          (clk,
           reset,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_ip_timestamp,
           read_AccumulatorCount,
           data_read,
           write_axi_enable,
           write_Accumulations,
           write_autoTrigger_i,
           write_frame_rx_trigger,
           write_frameLen_i,
           write_idleTime_i);


  input   clk;
  input   reset;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  input   [31:0] read_AccumulatorCount;  // ufix32
  output  [31:0] data_read;  // ufix32
  output  write_axi_enable;  // ufix1
  output  [31:0] write_Accumulations;  // ufix32
  output  write_autoTrigger_i;  // ufix1
  output  write_frame_rx_trigger;  // ufix1
  output  [15:0] write_frameLen_i;  // ufix16
  output  signed [23:0] write_idleTime_i;  // sfix24


  wire enb;
  wire decode_sel_ip_timestamp_1_1;  // ufix1
  wire [31:0] const_0;  // ufix32
  wire const_1;  // ufix1
  wire decode_sel_AccumulatorCount_1_1;  // ufix1
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] decode_rd_ip_timestamp_1_1;  // ufix32
  reg [31:0] read_reg_AccumulatorCount;  // ufix32
  wire [31:0] decode_rd_AccumulatorCount_1_1;  // ufix32
  wire decode_sel_axi_enable_1_1;  // ufix1
  wire reg_enb_axi_enable_1_1;  // ufix1
  wire data_in_axi_enable;  // ufix1
  reg  data_reg_axi_enable_1_1;  // ufix1
  wire decode_sel_Accumulations_1_1;  // ufix1
  wire reg_enb_Accumulations_1_1;  // ufix1
  reg [31:0] data_reg_Accumulations_1_1;  // ufix32
  wire decode_sel_autoTrigger_i_1_1;  // ufix1
  wire reg_enb_autoTrigger_i_1_1;  // ufix1
  wire data_in_autoTrigger_i;  // ufix1
  reg  data_reg_autoTrigger_i_1_1;  // ufix1
  wire decode_sel_frame_rx_trigger_1_1;  // ufix1
  wire reg_enb_frame_rx_trigger_1_1;  // ufix1
  wire data_in_frame_rx_trigger;  // ufix1
  reg  data_reg_frame_rx_trigger_1_1;  // ufix1
  wire decode_sel_frameLen_i_1_1;  // ufix1
  wire reg_enb_frameLen_i_1_1;  // ufix1
  wire [15:0] data_in_frameLen_i;  // ufix16
  reg [15:0] data_reg_frameLen_i_1_1;  // ufix16
  wire decode_sel_idleTime_i_1_1;  // ufix1
  wire reg_enb_idleTime_i_1_1;  // ufix1
  wire signed [23:0] data_in_idleTime_i;  // sfix24
  reg signed [23:0] data_reg_idleTime_i_1_1;  // sfix24


  assign decode_sel_ip_timestamp_1_1 = addr_sel == 14'b00000000000010;



  assign const_0 = 32'b00000000000000000000000000000000;



  assign const_1 = 1'b1;



  assign enb = const_1;

  assign decode_sel_AccumulatorCount_1_1 = addr_sel == 14'b00000001000010;



  always @(posedge clk)
    begin : reg_ip_timestamp_process
      if (reset == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end



  assign decode_rd_ip_timestamp_1_1 = (decode_sel_ip_timestamp_1_1 == 1'b0 ? const_0 :
              read_reg_ip_timestamp);



  always @(posedge clk)
    begin : reg_AccumulatorCount_process
      if (reset == 1'b1) begin
        read_reg_AccumulatorCount <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_AccumulatorCount <= read_AccumulatorCount;
        end
      end
    end



  assign decode_rd_AccumulatorCount_1_1 = (decode_sel_AccumulatorCount_1_1 == 1'b0 ? decode_rd_ip_timestamp_1_1 :
              read_reg_AccumulatorCount);



  assign data_read = decode_rd_AccumulatorCount_1_1;

  assign decode_sel_axi_enable_1_1 = addr_sel == 14'b00000000000001;



  assign reg_enb_axi_enable_1_1 = decode_sel_axi_enable_1_1 & wr_enb;



  assign data_in_axi_enable = data_write[0];



  always @(posedge clk)
    begin : reg_axi_enable_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi_enable_1_1 <= 1'b1;
      end
      else begin
        if (enb && reg_enb_axi_enable_1_1) begin
          data_reg_axi_enable_1_1 <= data_in_axi_enable;
        end
      end
    end



  assign write_axi_enable = data_reg_axi_enable_1_1;

  assign decode_sel_Accumulations_1_1 = addr_sel == 14'b00000001000000;



  assign reg_enb_Accumulations_1_1 = decode_sel_Accumulations_1_1 & wr_enb;



  always @(posedge clk)
    begin : reg_Accumulations_1_1_process
      if (reset == 1'b1) begin
        data_reg_Accumulations_1_1 <= 32'b00000000000000000010000000000000;
      end
      else begin
        if (enb && reg_enb_Accumulations_1_1) begin
          data_reg_Accumulations_1_1 <= data_write;
        end
      end
    end



  assign write_Accumulations = data_reg_Accumulations_1_1;

  assign decode_sel_autoTrigger_i_1_1 = addr_sel == 14'b00000001000001;



  assign reg_enb_autoTrigger_i_1_1 = decode_sel_autoTrigger_i_1_1 & wr_enb;



  assign data_in_autoTrigger_i = data_write[0];



  always @(posedge clk)
    begin : reg_autoTrigger_i_1_1_process
      if (reset == 1'b1) begin
        data_reg_autoTrigger_i_1_1 <= 1'b0;
      end
      else begin
        if (enb && reg_enb_autoTrigger_i_1_1) begin
          data_reg_autoTrigger_i_1_1 <= data_in_autoTrigger_i;
        end
      end
    end



  assign write_autoTrigger_i = data_reg_autoTrigger_i_1_1;

  assign decode_sel_frame_rx_trigger_1_1 = addr_sel == 14'b00000001000011;



  assign reg_enb_frame_rx_trigger_1_1 = decode_sel_frame_rx_trigger_1_1 & wr_enb;



  assign data_in_frame_rx_trigger = data_write[0];



  always @(posedge clk)
    begin : reg_frame_rx_trigger_1_1_process
      if (reset == 1'b1) begin
        data_reg_frame_rx_trigger_1_1 <= 1'b0;
      end
      else begin
        if (enb && reg_enb_frame_rx_trigger_1_1) begin
          data_reg_frame_rx_trigger_1_1 <= data_in_frame_rx_trigger;
        end
      end
    end



  assign write_frame_rx_trigger = data_reg_frame_rx_trigger_1_1;

  assign decode_sel_frameLen_i_1_1 = addr_sel == 14'b00000001000100;



  assign reg_enb_frameLen_i_1_1 = decode_sel_frameLen_i_1_1 & wr_enb;



  assign data_in_frameLen_i = data_write[15:0];



  always @(posedge clk)
    begin : reg_frameLen_i_1_1_process
      if (reset == 1'b1) begin
        data_reg_frameLen_i_1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb && reg_enb_frameLen_i_1_1) begin
          data_reg_frameLen_i_1_1 <= data_in_frameLen_i;
        end
      end
    end



  assign write_frameLen_i = data_reg_frameLen_i_1_1;

  assign decode_sel_idleTime_i_1_1 = addr_sel == 14'b00000001000101;



  assign reg_enb_idleTime_i_1_1 = decode_sel_idleTime_i_1_1 & wr_enb;



  assign data_in_idleTime_i = $signed(data_write[23:0]);



  always @(posedge clk)
    begin : reg_idleTime_i_1_1_process
      if (reset == 1'b1) begin
        data_reg_idleTime_i_1_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_idleTime_i_1_1) begin
          data_reg_idleTime_i_1_1 <= data_in_idleTime_i;
        end
      end
    end



  assign write_idleTime_i = data_reg_idleTime_i_1_1;

endmodule  // rx_dma_test_addr_decoder

