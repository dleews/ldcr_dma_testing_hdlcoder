// -------------------------------------------------------------
// 
// File Name: /home/draco/git/adi_dma_testing/iq_dma_example/hdl_ip/hdlsrc/rx_dma_test/rx_dma_test_src_Complex3Multiply_block.v
// Created: 2025-08-21 13:52:00
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: rx_dma_test_src_Complex3Multiply_block
// Source Path: rx_dma_test/LDCR_D/Channelizer_CH1/FFT/RADIX22FFT_SDF1_5/Complex3Multiply
// Hierarchy Level: 4
// Model version: 9.535
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module rx_dma_test_src_Complex3Multiply_block
          (clk,
           reset,
           enb,
           din_re,
           din_im,
           din_5_vld_dly,
           twdl_5_1_re,
           twdl_5_1_im,
           softReset,
           dinXTwdl_re,
           dinXTwdl_im,
           dinXTwdl_5_1_vld);


  input   clk;
  input   reset;
  input   enb;
  input   signed [18:0] din_re;  // sfix19_En5
  input   signed [18:0] din_im;  // sfix19_En5
  input   din_5_vld_dly;
  input   signed [13:0] twdl_5_1_re;  // sfix14_En12
  input   signed [13:0] twdl_5_1_im;  // sfix14_En12
  input   softReset;
  output  signed [18:0] dinXTwdl_re;  // sfix19_En5
  output  signed [18:0] dinXTwdl_im;  // sfix19_En5
  output  dinXTwdl_5_1_vld;


  reg signed [18:0] din_re_reg;  // sfix19_En5
  reg signed [18:0] din_im_reg;  // sfix19_En5
  wire signed [19:0] adder_add_cast;  // sfix20_En5
  wire signed [19:0] adder_add_cast_1;  // sfix20_En5
  wire signed [19:0] din_sum;  // sfix20_En5
  reg signed [13:0] twdl_re_reg;  // sfix14_En12
  reg signed [13:0] twdl_im_reg;  // sfix14_En12
  wire signed [14:0] adder_add_cast_2;  // sfix15_En12
  wire signed [14:0] adder_add_cast_3;  // sfix15_En12
  wire signed [14:0] twdl_sum;  // sfix15_En12
  reg signed [18:0] Complex3Multiply_din1_re_pipe1;  // sfix19
  reg signed [18:0] Complex3Multiply_din1_im_pipe1;  // sfix19
  reg signed [19:0] Complex3Multiply_din1_sum_pipe1;  // sfix20
  reg signed [32:0] Complex3Multiply_prodOfRe_pipe1;  // sfix33
  reg signed [32:0] Complex3Multiply_ProdOfIm_pipe1;  // sfix33
  reg signed [34:0] Complex3Multiply_prodOfSum_pipe1;  // sfix35
  reg signed [13:0] Complex3Multiply_twiddle_re_pipe1;  // sfix14
  reg signed [13:0] Complex3Multiply_twiddle_im_pipe1;  // sfix14
  reg signed [14:0] Complex3Multiply_twiddle_sum_pipe1;  // sfix15
  reg signed [32:0] prodOfRe;  // sfix33_En17
  reg signed [32:0] prodOfIm;  // sfix33_En17
  reg signed [34:0] prodOfSum;  // sfix35_En17
  reg  din_vld_dly1;
  reg  din_vld_dly2;
  reg  din_vld_dly3;
  reg  prod_vld;
  reg signed [34:0] Complex3Add_tmpResult_reg;  // sfix35
  reg signed [33:0] Complex3Add_multRes_re_reg1;  // sfix34
  reg signed [33:0] Complex3Add_multRes_re_reg2;  // sfix34
  reg signed [35:0] Complex3Add_multRes_im_reg;  // sfix36
  reg  Complex3Add_prod_vld_reg1;
  reg signed [34:0] Complex3Add_prodOfSum_reg;  // sfix35
  wire signed [34:0] Complex3Add_tmpResult_reg_next;  // sfix35_En17
  wire signed [33:0] Complex3Add_multRes_re_reg1_next;  // sfix34_En17
  wire signed [33:0] Complex3Add_multRes_re_reg2_next;  // sfix34_En17
  wire signed [35:0] Complex3Add_multRes_im_reg_next;  // sfix36_En17
  wire signed [33:0] Complex3Add_sub_cast;  // sfix34_En17
  wire signed [33:0] Complex3Add_sub_cast_1;  // sfix34_En17
  wire signed [35:0] Complex3Add_sub_cast_2;  // sfix36_En17
  wire signed [35:0] Complex3Add_sub_cast_3;  // sfix36_En17
  wire signed [33:0] Complex3Add_add_cast;  // sfix34_En17
  wire signed [33:0] Complex3Add_add_cast_1;  // sfix34_En17
  wire signed [33:0] Complex3Add_add_temp;  // sfix34_En17
  wire signed [33:0] multResFP_re;  // sfix34_En17
  wire signed [35:0] multResFP_im;  // sfix36_En17
  reg  dinXTwdl_5_1_vld_1;

  initial begin
    Complex3Multiply_din1_re_pipe1 = 19'sb0000000000000000000;
    Complex3Multiply_din1_im_pipe1 = 19'sb0000000000000000000;
    Complex3Multiply_din1_sum_pipe1 = 20'sb00000000000000000000;
    Complex3Multiply_twiddle_re_pipe1 = 14'sb00000000000000;
    Complex3Multiply_twiddle_im_pipe1 = 14'sb00000000000000;
    Complex3Multiply_twiddle_sum_pipe1 = 15'sb000000000000000;
    Complex3Multiply_prodOfRe_pipe1 = 33'sh000000000;
    Complex3Multiply_ProdOfIm_pipe1 = 33'sh000000000;
    Complex3Multiply_prodOfSum_pipe1 = 35'sh000000000;
    prodOfRe = 33'sh000000000;
    prodOfIm = 33'sh000000000;
    prodOfSum = 35'sh000000000;
  end

  always @(posedge clk)
    begin : intdelay_process
      if (reset == 1'b1) begin
        din_re_reg <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            din_re_reg <= 19'sb0000000000000000000;
          end
          else begin
            din_re_reg <= din_re;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        din_im_reg <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            din_im_reg <= 19'sb0000000000000000000;
          end
          else begin
            din_im_reg <= din_im;
          end
        end
      end
    end



  assign adder_add_cast = {din_re_reg[18], din_re_reg};
  assign adder_add_cast_1 = {din_im_reg[18], din_im_reg};
  assign din_sum = adder_add_cast + adder_add_cast_1;



  always @(posedge clk)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        twdl_re_reg <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            twdl_re_reg <= 14'sb00000000000000;
          end
          else begin
            twdl_re_reg <= twdl_5_1_re;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        twdl_im_reg <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            twdl_im_reg <= 14'sb00000000000000;
          end
          else begin
            twdl_im_reg <= twdl_5_1_im;
          end
        end
      end
    end



  assign adder_add_cast_2 = {twdl_re_reg[13], twdl_re_reg};
  assign adder_add_cast_3 = {twdl_im_reg[13], twdl_im_reg};
  assign twdl_sum = adder_add_cast_2 + adder_add_cast_3;



  // Complex3Multiply
  always @(posedge clk)
    begin : Complex3Multiply_process
      if (enb) begin
        prodOfRe <= Complex3Multiply_prodOfRe_pipe1;
        prodOfIm <= Complex3Multiply_ProdOfIm_pipe1;
        prodOfSum <= Complex3Multiply_prodOfSum_pipe1;
        Complex3Multiply_prodOfRe_pipe1 <= Complex3Multiply_din1_re_pipe1 * Complex3Multiply_twiddle_re_pipe1;
        Complex3Multiply_ProdOfIm_pipe1 <= Complex3Multiply_din1_im_pipe1 * Complex3Multiply_twiddle_im_pipe1;
        Complex3Multiply_prodOfSum_pipe1 <= Complex3Multiply_din1_sum_pipe1 * Complex3Multiply_twiddle_sum_pipe1;
        Complex3Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex3Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex3Multiply_twiddle_sum_pipe1 <= twdl_sum;
        Complex3Multiply_din1_re_pipe1 <= din_re_reg;
        Complex3Multiply_din1_im_pipe1 <= din_im_reg;
        Complex3Multiply_din1_sum_pipe1 <= din_sum;
      end
    end



  always @(posedge clk)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        din_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly1 <= din_5_vld_dly;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        din_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly2 <= din_vld_dly1;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        din_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly3 <= din_vld_dly2;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        prod_vld <= 1'b0;
      end
      else begin
        if (enb) begin
          prod_vld <= din_vld_dly3;
        end
      end
    end



  // Complex3Add
  always @(posedge clk)
    begin : Complex3Add_process
      if (reset == 1'b1) begin
        Complex3Add_prodOfSum_reg <= 35'sh000000000;
        Complex3Add_tmpResult_reg <= 35'sh000000000;
        Complex3Add_multRes_re_reg1 <= 34'sh000000000;
        Complex3Add_multRes_re_reg2 <= 34'sh000000000;
        Complex3Add_multRes_im_reg <= 36'sh000000000;
        Complex3Add_prod_vld_reg1 <= 1'b0;
        dinXTwdl_5_1_vld_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Complex3Add_tmpResult_reg <= Complex3Add_tmpResult_reg_next;
          Complex3Add_multRes_re_reg1 <= Complex3Add_multRes_re_reg1_next;
          Complex3Add_multRes_re_reg2 <= Complex3Add_multRes_re_reg2_next;
          Complex3Add_multRes_im_reg <= Complex3Add_multRes_im_reg_next;
          Complex3Add_prodOfSum_reg <= prodOfSum;
          dinXTwdl_5_1_vld_1 <= Complex3Add_prod_vld_reg1;
          Complex3Add_prod_vld_reg1 <= prod_vld;
        end
      end
    end

  assign Complex3Add_multRes_re_reg2_next = Complex3Add_multRes_re_reg1;
  assign Complex3Add_sub_cast = {prodOfRe[32], prodOfRe};
  assign Complex3Add_sub_cast_1 = {prodOfIm[32], prodOfIm};
  assign Complex3Add_multRes_re_reg1_next = Complex3Add_sub_cast - Complex3Add_sub_cast_1;
  assign Complex3Add_sub_cast_2 = {Complex3Add_prodOfSum_reg[34], Complex3Add_prodOfSum_reg};
  assign Complex3Add_sub_cast_3 = {Complex3Add_tmpResult_reg[34], Complex3Add_tmpResult_reg};
  assign Complex3Add_multRes_im_reg_next = Complex3Add_sub_cast_2 - Complex3Add_sub_cast_3;
  assign Complex3Add_add_cast = {prodOfRe[32], prodOfRe};
  assign Complex3Add_add_cast_1 = {prodOfIm[32], prodOfIm};
  assign Complex3Add_add_temp = Complex3Add_add_cast + Complex3Add_add_cast_1;
  assign Complex3Add_tmpResult_reg_next = {Complex3Add_add_temp[33], Complex3Add_add_temp};
  assign multResFP_re = Complex3Add_multRes_re_reg2;
  assign multResFP_im = Complex3Add_multRes_im_reg;



  assign dinXTwdl_re = multResFP_re[30:12];



  assign dinXTwdl_im = multResFP_im[30:12];



  assign dinXTwdl_5_1_vld = dinXTwdl_5_1_vld_1;

endmodule  // rx_dma_test_src_Complex3Multiply_block

