// -------------------------------------------------------------
// 
// File Name: /home/draco/git/adi_dma_testing/iq_dma_example/hdl_ip/hdlsrc/rx_dma_test/rx_dma_test.v
// Created: 2025-08-21 13:52:11
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: rx_dma_test
// Source Path: rx_dma_test
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module rx_dma_test
          (IPCORE_CLK,
           IPCORE_RESETN,
           adc_data_i0,
           adc_valid_i0,
           adc_data_q0,
           adc_valid_q0,
           adc_data_i1,
           adc_valid_i1,
           adc_data_q1,
           adc_valid_q1,
           AXI4_ACLK,
           AXI4_ARESETN,
           AXI4_AWID,
           AXI4_AWADDR,
           AXI4_AWLEN,
           AXI4_AWSIZE,
           AXI4_AWBURST,
           AXI4_AWLOCK,
           AXI4_AWCACHE,
           AXI4_AWPROT,
           AXI4_AWVALID,
           AXI4_WDATA,
           AXI4_WSTRB,
           AXI4_WLAST,
           AXI4_WVALID,
           AXI4_BREADY,
           AXI4_ARID,
           AXI4_ARADDR,
           AXI4_ARLEN,
           AXI4_ARSIZE,
           AXI4_ARBURST,
           AXI4_ARLOCK,
           AXI4_ARCACHE,
           AXI4_ARPROT,
           AXI4_ARVALID,
           AXI4_RREADY,
           ch1_rx_dma_i,
           ch1_rx_dma_q,
           ch2_rx_dma_i,
           ch2_rx_dma_q,
           rx_dma_valid,
           AXI4_AWREADY,
           AXI4_WREADY,
           AXI4_BID,
           AXI4_BRESP,
           AXI4_BVALID,
           AXI4_ARREADY,
           AXI4_RID,
           AXI4_RDATA,
           AXI4_RRESP,
           AXI4_RLAST,
           AXI4_RVALID);


  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   [15:0] adc_data_i0;  // ufix16
  input   adc_valid_i0;  // ufix1
  input   [15:0] adc_data_q0;  // ufix16
  input   adc_valid_q0;  // ufix1
  input   [15:0] adc_data_i1;  // ufix16
  input   adc_valid_i1;  // ufix1
  input   [15:0] adc_data_q1;  // ufix16
  input   adc_valid_q1;  // ufix1
  input   AXI4_ACLK;  // ufix1
  input   AXI4_ARESETN;  // ufix1
  input   [11:0] AXI4_AWID;  // ufix12
  input   [15:0] AXI4_AWADDR;  // ufix16
  input   [7:0] AXI4_AWLEN;  // ufix8
  input   [2:0] AXI4_AWSIZE;  // ufix3
  input   [1:0] AXI4_AWBURST;  // ufix2
  input   AXI4_AWLOCK;  // ufix1
  input   [3:0] AXI4_AWCACHE;  // ufix4
  input   [2:0] AXI4_AWPROT;  // ufix3
  input   AXI4_AWVALID;  // ufix1
  input   [31:0] AXI4_WDATA;  // ufix32
  input   [3:0] AXI4_WSTRB;  // ufix4
  input   AXI4_WLAST;  // ufix1
  input   AXI4_WVALID;  // ufix1
  input   AXI4_BREADY;  // ufix1
  input   [11:0] AXI4_ARID;  // ufix12
  input   [15:0] AXI4_ARADDR;  // ufix16
  input   [7:0] AXI4_ARLEN;  // ufix8
  input   [2:0] AXI4_ARSIZE;  // ufix3
  input   [1:0] AXI4_ARBURST;  // ufix2
  input   AXI4_ARLOCK;  // ufix1
  input   [3:0] AXI4_ARCACHE;  // ufix4
  input   [2:0] AXI4_ARPROT;  // ufix3
  input   AXI4_ARVALID;  // ufix1
  input   AXI4_RREADY;  // ufix1
  output  [15:0] ch1_rx_dma_i;  // ufix16
  output  [15:0] ch1_rx_dma_q;  // ufix16
  output  [15:0] ch2_rx_dma_i;  // ufix16
  output  [15:0] ch2_rx_dma_q;  // ufix16
  output  rx_dma_valid;  // ufix1
  output  AXI4_AWREADY;  // ufix1
  output  AXI4_WREADY;  // ufix1
  output  [11:0] AXI4_BID;  // ufix12
  output  [1:0] AXI4_BRESP;  // ufix2
  output  AXI4_BVALID;  // ufix1
  output  AXI4_ARREADY;  // ufix1
  output  [11:0] AXI4_RID;  // ufix12
  output  [31:0] AXI4_RDATA;  // ufix32
  output  [1:0] AXI4_RRESP;  // ufix2
  output  AXI4_RLAST;  // ufix1
  output  AXI4_RVALID;  // ufix1


  wire reset;
  wire [31:0] ip_timestamp;  // ufix32
  wire reset_cm;  // ufix1
  wire signed [15:0] adc_data_i0_sig;  // sfix16
  wire signed [15:0] adc_data_q0_sig;  // sfix16
  wire signed [15:0] adc_data_i1_sig;  // sfix16
  wire signed [15:0] adc_data_q1_sig;  // sfix16
  wire reset_internal;  // ufix1
  wire reset_before_sync;  // ufix1
  wire [31:0] AccumulatorCount_sig;  // ufix32
  wire write_axi_enable;  // ufix1
  wire [31:0] write_Accumulations;  // ufix32
  wire write_enable_rx_dma_count;  // ufix1
  wire ce_out_sig;  // ufix1
  wire [15:0] ch1_rx_dma_i_sig;  // ufix16
  wire [15:0] ch1_rx_dma_q_sig;  // ufix16
  wire [15:0] ch2_rx_dma_i_sig;  // ufix16
  wire [15:0] ch2_rx_dma_q_sig;  // ufix16
  wire rx_dma_valid_sig;  // ufix1


  assign ip_timestamp = 32'b10010101100000000100010010011000;



  assign reset_cm =  ~ IPCORE_RESETN;



  assign adc_data_i0_sig = adc_data_i0;



  assign adc_data_q0_sig = adc_data_q0;



  assign adc_data_i1_sig = adc_data_i1;



  assign adc_data_q1_sig = adc_data_q1;



  assign reset_before_sync = reset_cm | reset_internal;



  rx_dma_test_reset_sync u_rx_dma_test_reset_sync_inst (.clk(IPCORE_CLK),  // ufix1
                                                        .reset_in(reset_before_sync),  // ufix1
                                                        .reset_out(reset)
                                                        );

  rx_dma_test_axi4 u_rx_dma_test_axi4_inst (.reset(reset),
                                            .AXI4_ACLK(AXI4_ACLK),  // ufix1
                                            .AXI4_ARESETN(AXI4_ARESETN),  // ufix1
                                            .AXI4_AWID(AXI4_AWID),  // ufix12
                                            .AXI4_AWADDR(AXI4_AWADDR),  // ufix16
                                            .AXI4_AWLEN(AXI4_AWLEN),  // ufix8
                                            .AXI4_AWSIZE(AXI4_AWSIZE),  // ufix3
                                            .AXI4_AWBURST(AXI4_AWBURST),  // ufix2
                                            .AXI4_AWLOCK(AXI4_AWLOCK),  // ufix1
                                            .AXI4_AWCACHE(AXI4_AWCACHE),  // ufix4
                                            .AXI4_AWPROT(AXI4_AWPROT),  // ufix3
                                            .AXI4_AWVALID(AXI4_AWVALID),  // ufix1
                                            .AXI4_WDATA(AXI4_WDATA),  // ufix32
                                            .AXI4_WSTRB(AXI4_WSTRB),  // ufix4
                                            .AXI4_WLAST(AXI4_WLAST),  // ufix1
                                            .AXI4_WVALID(AXI4_WVALID),  // ufix1
                                            .AXI4_BREADY(AXI4_BREADY),  // ufix1
                                            .AXI4_ARID(AXI4_ARID),  // ufix12
                                            .AXI4_ARADDR(AXI4_ARADDR),  // ufix16
                                            .AXI4_ARLEN(AXI4_ARLEN),  // ufix8
                                            .AXI4_ARSIZE(AXI4_ARSIZE),  // ufix3
                                            .AXI4_ARBURST(AXI4_ARBURST),  // ufix2
                                            .AXI4_ARLOCK(AXI4_ARLOCK),  // ufix1
                                            .AXI4_ARCACHE(AXI4_ARCACHE),  // ufix4
                                            .AXI4_ARPROT(AXI4_ARPROT),  // ufix3
                                            .AXI4_ARVALID(AXI4_ARVALID),  // ufix1
                                            .AXI4_RREADY(AXI4_RREADY),  // ufix1
                                            .read_ip_timestamp(ip_timestamp),  // ufix32
                                            .read_AccumulatorCount(AccumulatorCount_sig),  // ufix32
                                            .AXI4_AWREADY(AXI4_AWREADY),  // ufix1
                                            .AXI4_WREADY(AXI4_WREADY),  // ufix1
                                            .AXI4_BID(AXI4_BID),  // ufix12
                                            .AXI4_BRESP(AXI4_BRESP),  // ufix2
                                            .AXI4_BVALID(AXI4_BVALID),  // ufix1
                                            .AXI4_ARREADY(AXI4_ARREADY),  // ufix1
                                            .AXI4_RID(AXI4_RID),  // ufix12
                                            .AXI4_RDATA(AXI4_RDATA),  // ufix32
                                            .AXI4_RRESP(AXI4_RRESP),  // ufix2
                                            .AXI4_RLAST(AXI4_RLAST),  // ufix1
                                            .AXI4_RVALID(AXI4_RVALID),  // ufix1
                                            .write_axi_enable(write_axi_enable),  // ufix1
                                            .write_Accumulations(write_Accumulations),  // ufix32
                                            .write_enable_rx_dma_count(write_enable_rx_dma_count),  // ufix1
                                            .reset_internal(reset_internal)  // ufix1
                                            );

  rx_dma_test_dut u_rx_dma_test_dut_inst (.clk(IPCORE_CLK),  // ufix1
                                          .reset(reset),
                                          .dut_enable(write_axi_enable),  // ufix1
                                          .adc_data_i0(adc_data_i0_sig),  // sfix16
                                          .adc_valid_i0(adc_valid_i0),  // ufix1
                                          .adc_data_q0(adc_data_q0_sig),  // sfix16
                                          .adc_valid_q0(adc_valid_q0),  // ufix1
                                          .adc_data_i1(adc_data_i1_sig),  // sfix16
                                          .adc_valid_i1(adc_valid_i1),  // ufix1
                                          .adc_data_q1(adc_data_q1_sig),  // sfix16
                                          .adc_valid_q1(adc_valid_q1),  // ufix1
                                          .Accumulations(write_Accumulations),  // ufix32
                                          .enable_rx_dma_count(write_enable_rx_dma_count),  // ufix1
                                          .ce_out(ce_out_sig),  // ufix1
                                          .AccumulatorCount(AccumulatorCount_sig),  // ufix32
                                          .ch1_rx_dma_i(ch1_rx_dma_i_sig),  // ufix16
                                          .ch1_rx_dma_q(ch1_rx_dma_q_sig),  // ufix16
                                          .ch2_rx_dma_i(ch2_rx_dma_i_sig),  // ufix16
                                          .ch2_rx_dma_q(ch2_rx_dma_q_sig),  // ufix16
                                          .rx_dma_valid(rx_dma_valid_sig)  // ufix1
                                          );

  assign ch1_rx_dma_i = ch1_rx_dma_i_sig;

  assign ch1_rx_dma_q = ch1_rx_dma_q_sig;

  assign ch2_rx_dma_i = ch2_rx_dma_i_sig;

  assign ch2_rx_dma_q = ch2_rx_dma_q_sig;

  assign rx_dma_valid = rx_dma_valid_sig;

endmodule  // rx_dma_test

